Terminals unused in grammar

    MINUS
    MULT
    DIV
    MOD


State 25 conflicts: 3 shift/reduce
State 27 conflicts: 3 shift/reduce


Grammar

    0 $accept: program $end

    1 program: expr SPLIT

    2 expr: NUM
    3     | FUNCTION VAR LPAR expr RPAR expr
    4     | FUNCTION VAR LPAR RPAR expr
    5     | RETURN LPAR expr RPAR
    6     | VAR
    7     | LPAR expr RPAR
    8     | expr SPLIT expr
    9     | expr PLUS expr
   10     | expr ASSIGN expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    RETURN (258) 5
    SPLIT (259) 1 8
    VAR (260) 3 4 6
    ASSIGN (261) 10
    PLUS (262) 9
    MINUS (263)
    MULT (264)
    DIV (265)
    MOD (266)
    LPAR (267) 3 4 5 7
    RPAR (268) 3 4 5 7
    NUM (269) 2
    FUNCTION (270) 3 4


Nonterminals, with rules where they appear

    $accept (16)
        on left: 0
    expr (17)
        on left: 2 3 4 5 6 7 8 9 10
        on right: 1 3 4 5 7 8 9 10
    program (18)
        on left: 1
        on right: 0


State 0

    0 $accept: . program $end

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr     go to state 6
    program  go to state 7


State 1

    5 expr: RETURN . LPAR expr RPAR

    LPAR  shift, and go to state 8


State 2

    6 expr: VAR .

    $default  reduce using rule 6 (expr)


State 3

    7 expr: LPAR . expr RPAR

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 9


State 4

    2 expr: NUM .

    $default  reduce using rule 2 (expr)


State 5

    3 expr: FUNCTION . VAR LPAR expr RPAR expr
    4     | FUNCTION . VAR LPAR RPAR expr

    VAR  shift, and go to state 10


State 6

    1 program: expr . SPLIT
    8 expr: expr . SPLIT expr
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr

    SPLIT   shift, and go to state 11
    ASSIGN  shift, and go to state 12
    PLUS    shift, and go to state 13


State 7

    0 $accept: program . $end

    $end  shift, and go to state 14


State 8

    5 expr: RETURN LPAR . expr RPAR

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 15


State 9

    7 expr: LPAR expr . RPAR
    8     | expr . SPLIT expr
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr

    SPLIT   shift, and go to state 16
    ASSIGN  shift, and go to state 12
    PLUS    shift, and go to state 13
    RPAR    shift, and go to state 17


State 10

    3 expr: FUNCTION VAR . LPAR expr RPAR expr
    4     | FUNCTION VAR . LPAR RPAR expr

    LPAR  shift, and go to state 18


State 11

    1 program: expr SPLIT .
    8 expr: expr SPLIT . expr

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    $default  reduce using rule 1 (program)

    expr  go to state 19


State 12

   10 expr: expr ASSIGN . expr

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 20


State 13

    9 expr: expr PLUS . expr

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 21


State 14

    0 $accept: program $end .

    $default  accept


State 15

    5 expr: RETURN LPAR expr . RPAR
    8     | expr . SPLIT expr
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr

    SPLIT   shift, and go to state 16
    ASSIGN  shift, and go to state 12
    PLUS    shift, and go to state 13
    RPAR    shift, and go to state 22


State 16

    8 expr: expr SPLIT . expr

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 19


State 17

    7 expr: LPAR expr RPAR .

    $default  reduce using rule 7 (expr)


State 18

    3 expr: FUNCTION VAR LPAR . expr RPAR expr
    4     | FUNCTION VAR LPAR . RPAR expr

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    RPAR      shift, and go to state 23
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 24


State 19

    8 expr: expr . SPLIT expr
    8     | expr SPLIT expr .
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr

    PLUS  shift, and go to state 13

    $default  reduce using rule 8 (expr)


State 20

    8 expr: expr . SPLIT expr
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr
   10     | expr ASSIGN expr .

    SPLIT  shift, and go to state 16
    PLUS   shift, and go to state 13

    $default  reduce using rule 10 (expr)


State 21

    8 expr: expr . SPLIT expr
    9     | expr . PLUS expr
    9     | expr PLUS expr .
   10     | expr . ASSIGN expr

    $default  reduce using rule 9 (expr)


State 22

    5 expr: RETURN LPAR expr RPAR .

    $default  reduce using rule 5 (expr)


State 23

    4 expr: FUNCTION VAR LPAR RPAR . expr

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 25


State 24

    3 expr: FUNCTION VAR LPAR expr . RPAR expr
    8     | expr . SPLIT expr
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr

    SPLIT   shift, and go to state 16
    ASSIGN  shift, and go to state 12
    PLUS    shift, and go to state 13
    RPAR    shift, and go to state 26


State 25

    4 expr: FUNCTION VAR LPAR RPAR expr .
    8     | expr . SPLIT expr
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr

    SPLIT   shift, and go to state 16
    ASSIGN  shift, and go to state 12
    PLUS    shift, and go to state 13

    SPLIT     [reduce using rule 4 (expr)]
    ASSIGN    [reduce using rule 4 (expr)]
    PLUS      [reduce using rule 4 (expr)]
    $default  reduce using rule 4 (expr)


State 26

    3 expr: FUNCTION VAR LPAR expr RPAR . expr

    RETURN    shift, and go to state 1
    VAR       shift, and go to state 2
    LPAR      shift, and go to state 3
    NUM       shift, and go to state 4
    FUNCTION  shift, and go to state 5

    expr  go to state 27


State 27

    3 expr: FUNCTION VAR LPAR expr RPAR expr .
    8     | expr . SPLIT expr
    9     | expr . PLUS expr
   10     | expr . ASSIGN expr

    SPLIT   shift, and go to state 16
    ASSIGN  shift, and go to state 12
    PLUS    shift, and go to state 13

    SPLIT     [reduce using rule 3 (expr)]
    ASSIGN    [reduce using rule 3 (expr)]
    PLUS      [reduce using rule 3 (expr)]
    $default  reduce using rule 3 (expr)
